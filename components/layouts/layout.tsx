import { styled } from "../../stitches.config";
import Head from "next/head";
import { createContext, Dispatch, SetStateAction, useState } from "react";
import { ResponseRecord } from "../../types/types";
import { ThemeButton, ResponseRecorder } from "../";
type MainProps = {
  children: JSX.Element;
};

const MainContainer = styled("main", {
  display: "flex",
  position: "relative",
  backgroundColor: "$sand1",
  overflowX: "hidden",
  height: "100vh",
});

const ContentContainer = styled("div", {
  display: "flex",
  width: "100%",
  overflowY: "auto",
  position: "relative",
  justifyContent: "center",
});

const ResponseContainer = styled("div", {
  display: "flex",
  backgroundColor: "$sand2",
  flexDirection: "column",
  width: "100%",
  overflowY: "auto",
  padding: "$6",
  gap: "$6",
  boxSizing: "border-box",
});

interface ResponseContext {
  responseRecord: ResponseRecord[] | undefined;
  setResponseRecord: Dispatch<SetStateAction<ResponseRecord[] | undefined>>;
}

export const ResponseContext = createContext<ResponseContext | undefined>(
  undefined
);

export default function Layout({ children }: MainProps) {
  const [responseRecord, setResponseRecord] = useState<ResponseRecord[]>();

  return (
    <div>
      <Head>
        <title>Alloy Sample App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MainContainer>
        <ThemeButton />
        <ResponseContext.Provider
          value={{
            responseRecord,
            setResponseRecord,
          }}
        >
          <ContentContainer>{children}</ContentContainer>
          <ResponseContainer>
            {responseRecord && (
              <ResponseRecorder
                responseRecord={responseRecord}
              ></ResponseRecorder>
            )}
          </ResponseContainer>
        </ResponseContext.Provider>
      </MainContainer>
    </div>
  );
}
